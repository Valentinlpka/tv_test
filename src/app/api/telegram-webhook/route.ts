import { NextRequest, NextResponse } from 'next/server';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// Fonctions pour communiquer avec l'API centralis√©e
async function getTicketsData() {
  try {
    const baseUrl = process.env.VERCEL_URL 
      ? `https://${process.env.VERCEL_URL}` 
      : 'http://localhost:3000';
      
    const response = await fetch(`${baseUrl}/api/tickets-db`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Erreur r√©cup√©ration tickets:', error);
    return { tickets: [], stats: { total: 0, open: 0, closed: 0, urgent: 0 } };
  }
}

async function getTicket(ticketId: string) {
  try {
    const baseUrl = process.env.VERCEL_URL 
      ? `https://${process.env.VERCEL_URL}` 
      : 'http://localhost:3000';
      
    const response = await fetch(`${baseUrl}/api/tickets-db?id=${ticketId}`);
    const data = await response.json();
    return data.ticket;
  } catch (error) {
    console.error('Erreur r√©cup√©ration ticket:', error);
    return null;
  }
}

async function addMessageToTicket(ticketId: string, message: string, sender: 'user' | 'support'): Promise<boolean> {
  try {
    const baseUrl = process.env.VERCEL_URL 
      ? `https://${process.env.VERCEL_URL}` 
      : 'http://localhost:3000';
      
    const response = await fetch(`${baseUrl}/api/tickets-db`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        action: 'add_message',
        ticketId,
        message,
        sender
      })
    });
    
    const data = await response.json();
    return data.success;
  } catch (error) {
    console.error('Erreur ajout message:', error);
    return false;
  }
}

async function updateTicketStatus(ticketId: string, status: 'open' | 'closed' | 'pending') {
  try {
    const baseUrl = process.env.VERCEL_URL 
      ? `https://${process.env.VERCEL_URL}` 
      : 'http://localhost:3000';
      
    const response = await fetch(`${baseUrl}/api/tickets-db`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        action: 'update_status',
        ticketId,
        status
      })
    });
    
    const data = await response.json();
    return data.success;
  } catch (error) {
    console.error('Erreur mise √† jour status:', error);
    return false;
  }
}

async function updateTicketPriority(ticketId: string, priority: 'low' | 'medium' | 'high' | 'urgent') {
  try {
    const baseUrl = process.env.VERCEL_URL 
      ? `https://${process.env.VERCEL_URL}` 
      : 'http://localhost:3000';
      
    const response = await fetch(`${baseUrl}/api/tickets-db`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        action: 'update_priority',
        ticketId,
        priority
      })
    });
    
    const data = await response.json();
    return data.success;
  } catch (error) {
    console.error('Erreur mise √† jour priorit√©:', error);
    return false;
  }
}

// Fonction pour envoyer un message Telegram
async function sendTelegramMessage(text: string, chatId?: string) {
  if (!TELEGRAM_BOT_TOKEN) return;
  
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId || TELEGRAM_CHAT_ID,
        text: text,
        parse_mode: 'Markdown'
      })
    });
  } catch (error) {
    console.error('Erreur envoi Telegram:', error);
  }
}

// Traiter les commandes Telegram
async function handleTelegramCommand(text: string, fromUser: any) {
  const command = text.toLowerCase().trim();
  
  // NOUVELLE COMMANDE: /reply T1001 message
  if (command.startsWith('/reply ')) {
    const parts = text.split(' ');
    const ticketId = parts[1]?.toUpperCase();
    const message = parts.slice(2).join(' ');
    
    if (!ticketId || !message) {
      return `‚ùå Format: \`/reply T1001 Votre message ici\`\nüí° Exemple: \`/reply T1001 Bonjour ! Comment puis-je vous aider ?\``;
    }
    
    const ticket = await getTicket(ticketId);
    if (!ticket) {
      return `‚ùå Ticket \`${ticketId}\` introuvable.\nUtilisez \`/tickets\` pour voir la liste.`;
    }
    
    // Ajouter le message au ticket
    const success = await addMessageToTicket(ticketId, message, 'support');
    
    if (success) {
      // Aussi l'ajouter au chat g√©n√©ral pour l'affichage sur le site
      try {
        const baseUrl = process.env.VERCEL_URL 
          ? `https://${process.env.VERCEL_URL}` 
          : 'http://localhost:3000';
          
        await fetch(`${baseUrl}/api/chat-messages`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: `üé´ ${ticketId} - ${message}`,
            sender: 'support'
          })
        });
      } catch (error) {
        console.error('Erreur chat-messages:', error);
      }
      
      return `‚úÖ R√©ponse envoy√©e au ticket \`${ticketId}\`\nüë§ Client: ${ticket.userName}\nüí¨ Message: "${message}"`;
    } else {
      return `‚ùå Erreur lors de l'envoi de la r√©ponse au ticket \`${ticketId}\``;
    }
  }
  
  if (command === '/tickets' || command === '/list') {
    const data = await getTicketsData();
    const { tickets, stats } = data;
    const openTickets = tickets.filter((t: any) => t.status === 'open');
    
    let response = `üé´ *GESTION DES TICKETS*\n\n`;
    response += `üìä *R√©sum√©:*\n`;
    response += `‚Ä¢ üü¢ Ouverts: ${stats.open}\n`;
    response += `‚Ä¢ üî¥ Ferm√©s: ${stats.closed}\n`;
    response += `‚Ä¢ üìà Total: ${stats.total}\n\n`;
    
    if (openTickets.length > 0) {
      response += `üü¢ *Tickets ouverts:*\n`;
      openTickets.slice(0, 10).forEach((ticket: any) => {
        const priority = ticket.priority === 'urgent' ? 'üö®' : ticket.priority === 'high' ? 'üî¥' : ticket.priority === 'medium' ? 'üü°' : 'üü¢';
        response += `${priority} \`${ticket.id}\` - ${ticket.userName}\n`;
        response += `   "${ticket.subject}"\n`;
        response += `   üìÖ ${ticket.createdAt}\n\n`;
      });
      
      if (openTickets.length > 10) {
        response += `... et ${openTickets.length - 10} autres\n\n`;
      }
    }
    
    response += `üí° *Commandes:*\n`;
    response += `‚Ä¢ \`/reply T1001 message\` - R√©pondre √† un ticket\n`;
    response += `‚Ä¢ \`/ticket T1001\` - Voir ticket\n`;
    response += `‚Ä¢ \`/close T1001\` - Fermer ticket\n`;
    response += `‚Ä¢ \`/reopen T1001\` - Rouvrir ticket\n`;
    response += `‚Ä¢ \`/priority T1001 urgent\` - Changer priorit√©\n`;
    response += `‚Ä¢ \`/stats\` - Statistiques d√©taill√©es`;
    
    return response;
  }
  
  if (command.startsWith('/ticket ')) {
    const ticketId = command.split(' ')[1]?.toUpperCase();
    const ticket = await getTicket(ticketId);
    
    if (!ticket) {
      return `‚ùå Ticket \`${ticketId}\` introuvable.\nUtilisez \`/tickets\` pour voir la liste.`;
    }
    
    const statusEmoji = ticket.status === 'open' ? 'üü¢' : ticket.status === 'closed' ? 'üî¥' : 'üü°';
    const priorityEmoji = ticket.priority === 'urgent' ? 'üö®' : ticket.priority === 'high' ? 'üî¥' : ticket.priority === 'medium' ? 'üü°' : 'üü¢';
    
    let response = `üé´ *TICKET ${ticket.id}*\n\n`;
    response += `${statusEmoji} *Status:* ${ticket.status.toUpperCase()}\n`;
    response += `${priorityEmoji} *Priorit√©:* ${ticket.priority.toUpperCase()}\n`;
    response += `üë§ *Client:* ${ticket.userName}\n`;
    if (ticket.userEmail) response += `üìß *Email:* ${ticket.userEmail}\n`;
    response += `üìù *Sujet:* ${ticket.subject}\n`;
    response += `üìÖ *Cr√©√©:* ${ticket.createdAt}\n`;
    response += `‚è∞ *Derni√®re activit√©:* ${ticket.lastActivity}\n\n`;
    
    response += `üí¨ *CONVERSATION:*\n`;
    ticket.messages.forEach((msg: any, index: number) => {
      const emoji = msg.sender === 'user' ? 'üë§' : 'üéß';
      response += `${emoji} *${msg.sender === 'user' ? ticket.userName : 'Support'}* (${msg.timestamp}):\n`;
      response += `"${msg.text}"\n\n`;
    });
    
    response += `üõ†Ô∏è *Actions:*\n`;
    response += `‚Ä¢ \`/reply ${ticket.id} Votre r√©ponse\` - R√©pondre\n`;
    if (ticket.status === 'open') {
      response += `‚Ä¢ \`/close ${ticket.id}\` - Fermer le ticket\n`;
    } else {
      response += `‚Ä¢ \`/reopen ${ticket.id}\` - Rouvrir le ticket\n`;
    }
    response += `‚Ä¢ \`/priority ${ticket.id} urgent\` - Changer priorit√©`;
    
    return response;
  }
  
  if (command.startsWith('/close ')) {
    const ticketId = command.split(' ')[1]?.toUpperCase();
    const ticket = await getTicket(ticketId);
    
    if (!ticket) {
      return `‚ùå Ticket \`${ticketId}\` introuvable.`;
    }
    
    if (ticket.status === 'closed') {
      return `‚ÑπÔ∏è Le ticket \`${ticketId}\` est d√©j√† ferm√©.`;
    }
    
    await updateTicketStatus(ticketId, 'closed');
    
    return `‚úÖ Ticket \`${ticketId}\` ferm√© avec succ√®s.\nüë§ Client: ${ticket.userName}\nüìù Sujet: "${ticket.subject}"`;
  }
  
  if (command.startsWith('/reopen ')) {
    const ticketId = command.split(' ')[1]?.toUpperCase();
    const ticket = await getTicket(ticketId);
    
    if (!ticket) {
      return `‚ùå Ticket \`${ticketId}\` introuvable.`;
    }
    
    if (ticket.status === 'open') {
      return `‚ÑπÔ∏è Le ticket \`${ticketId}\` est d√©j√† ouvert.`;
    }
    
    await updateTicketStatus(ticketId, 'open');
    
    return `üîì Ticket \`${ticketId}\` rouvert avec succ√®s.\nüë§ Client: ${ticket.userName}`;
  }
  
  if (command.startsWith('/priority ')) {
    const parts = command.split(' ');
    const ticketId = parts[1]?.toUpperCase();
    const newPriority = parts[2]?.toLowerCase();
    
    if (!['low', 'medium', 'high', 'urgent'].includes(newPriority)) {
      return `‚ùå Priorit√© invalide. Utilisez: low, medium, high, urgent`;
    }
    
    const ticket = await getTicket(ticketId);
    if (!ticket) {
      return `‚ùå Ticket \`${ticketId}\` introuvable.`;
    }
    
    const oldPriority = ticket.priority;
    await updateTicketPriority(ticketId, newPriority as any);
    
    const priorityEmoji = newPriority === 'urgent' ? 'üö®' : newPriority === 'high' ? 'üî¥' : newPriority === 'medium' ? 'üü°' : 'üü¢';
    
    return `${priorityEmoji} Priorit√© du ticket \`${ticketId}\` chang√©e de ${oldPriority} ‚Üí *${newPriority}*`;
  }
  
  if (command === '/stats') {
    const data = await getTicketsData();
    const { tickets, stats } = data;
    const urgentTickets = tickets.filter((t: any) => t.priority === 'urgent' && t.status === 'open');
    const oldTickets = tickets.filter((t: any) => {
      const created = new Date(t.createdAt);
      const daysDiff = (Date.now() - created.getTime()) / (1000 * 60 * 60 * 24);
      return daysDiff > 7 && t.status === 'open';
    });
    
    let response = `üìä *STATISTIQUES D√âTAILL√âES*\n\n`;
    response += `üé´ *Tickets totaux:* ${stats.total}\n`;
    response += `üü¢ *Ouverts:* ${stats.open}\n`;
    response += `üî¥ *Ferm√©s:* ${stats.closed}\n`;
    response += `üö® *Urgents:* ${stats.urgent}\n`;
    response += `‚è∞ *Anciens (>7j):* ${oldTickets.length}\n\n`;
    
    if (urgentTickets.length > 0) {
      response += `üö® *Tickets urgents:*\n`;
      urgentTickets.forEach((ticket: any) => {
        response += `‚Ä¢ \`${ticket.id}\` - ${ticket.userName}\n`;
      });
      response += `\n`;
    }
    
    response += `üí° *Actions recommand√©es:*\n`;
    if (urgentTickets.length > 0) response += `‚Ä¢ Traiter les ${urgentTickets.length} tickets urgents\n`;
    if (oldTickets.length > 0) response += `‚Ä¢ V√©rifier les ${oldTickets.length} tickets anciens\n`;
    if (stats.open === 0) response += `‚Ä¢ üéâ Tous les tickets sont trait√©s !\n`;
    
    return response;
  }
  
  if (command === '/help') {
    return `ü§ñ *AIDE - GESTION TICKETS*\n\n` +
           `üìã *Commandes principales:*\n` +
           `‚Ä¢ \`/reply T1001 message\` - R√©pondre √† un ticket\n` +
           `‚Ä¢ \`/tickets\` - Liste des tickets\n` +
           `‚Ä¢ \`/ticket T1001\` - D√©tails d'un ticket\n` +
           `‚Ä¢ \`/close T1001\` - Fermer un ticket\n` +
           `‚Ä¢ \`/reopen T1001\` - Rouvrir un ticket\n` +
           `‚Ä¢ \`/priority T1001 urgent\` - Changer priorit√©\n` +
           `‚Ä¢ \`/stats\` - Statistiques d√©taill√©es\n\n` +
           `üìù *Priorit√©s disponibles:*\n` +
           `‚Ä¢ \`low\` üü¢ - Faible\n` +
           `‚Ä¢ \`medium\` üü° - Moyenne\n` +
           `‚Ä¢ \`high\` üî¥ - √âlev√©e\n` +
           `‚Ä¢ \`urgent\` üö® - Urgente\n\n` +
           `üí° *Exemples:*\n` +
           `‚Ä¢ \`/reply T1001 Bonjour ! Je peux vous aider ?\`\n` +
           `‚Ä¢ \`/close T1001\`\n` +
           `‚Ä¢ \`/priority T1001 urgent\``;
  }
  
  return null; // Pas une commande reconnue
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // V√©rifier que c'est bien notre bot
    if (!body.message || !TELEGRAM_BOT_TOKEN) {
      return NextResponse.json({ ok: true });
    }

    const message = body.message;
    const chatId = message.chat.id.toString();
    const text = message.text;
    const fromUser = message.from;

    // Ignorer les messages du bot lui-m√™me et le /start
    if (message.from.is_bot || text?.startsWith('/start')) {
      return NextResponse.json({ ok: true });
    }

    console.log('üì® Message re√ßu de Telegram:');
    console.log(`üë§ De: ${fromUser.first_name} ${fromUser.last_name || ''}`);
    console.log(`üí¨ Message: ${text}`);
    console.log(`üÜî Chat ID: ${chatId}`);

    // V√©rifier si c'est une commande pour la gestion des tickets
    if (text?.startsWith('/')) {
      const response = await handleTelegramCommand(text, fromUser);
      if (response) {
        await sendTelegramMessage(response, chatId);
        return NextResponse.json({ ok: true });
      }
    }

    // Si ce n'est pas une commande, c'est une r√©ponse support g√©n√©rale
    // (Pour les gens qui r√©pondent sans /reply)
    const data = await getTicketsData();
    const openTickets = data.tickets.filter((t: any) => t.status === 'open');
    
    if (openTickets.length === 1) {
      // S'il n'y a qu'un seul ticket ouvert, on associe automatiquement
      const ticket = openTickets[0];
      await addMessageToTicket(ticket.id, text, 'support');
      
      await sendTelegramMessage(
        `‚úÖ R√©ponse automatiquement associ√©e au ticket \`${ticket.id}\` (${ticket.userName})\n\n` +
        `üí° Pour √™tre plus pr√©cis, utilisez: \`/reply ${ticket.id} votre message\``,
        chatId
      );
    } else if (openTickets.length > 1) {
      // S'il y a plusieurs tickets, demander de pr√©ciser
      await sendTelegramMessage(
        `‚ùì Plusieurs tickets ouverts (${openTickets.length}). Pr√©cisez avec:\n\n` +
        `\`/reply T1001 votre message\`\n\n` +
        `üìã Ou tapez \`/tickets\` pour voir la liste`,
        chatId
      );
    } else {
      // Aucun ticket ouvert, r√©ponse g√©n√©rale
      await sendTelegramMessage(
        `‚ÑπÔ∏è Aucun ticket ouvert. Votre message a √©t√© enregistr√© comme r√©ponse g√©n√©rale.\n\n` +
        `üìã Tapez \`/tickets\` pour voir les tickets ferm√©s`,
        chatId
      );
    }
    
    // Enregistrer le message comme r√©ponse support dans le syst√®me de chat
    try {
      const baseUrl = process.env.VERCEL_URL 
        ? `https://${process.env.VERCEL_URL}` 
        : 'http://localhost:3000';
        
      await fetch(`${baseUrl}/api/chat-messages`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: text,
          sender: 'support'
        })
      });
    } catch (error) {
      console.error('Erreur enregistrement message:', error);
    }
    
    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('‚ùå Erreur webhook Telegram:', error);
    return NextResponse.json({ ok: true }); // Toujours r√©pondre OK √† Telegram
  }
}
